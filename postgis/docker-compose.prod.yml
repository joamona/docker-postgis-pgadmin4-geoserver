#Optional
#version: "3.9"

#To get into a database
#   install psql:
#   sudo apt-get install -y postgresql-client
#   psql -U postgres -d exampledatabase -h localhost -p 5432

#create the user vagrant and set the password vagrant
#   create role vagrant superuser createdb createrole login replication bypassrls;
#   alter user vagrant with password 'vagrant';

#If you set the variables
#   export PGHOST="localhost"
#   export PGPASSWORD="vagrant"
#at the end of the file ~/.bashrc
#on open a new terminal you will be able to get into a database like below
#   psql -d postgres

#The project name is the folder name containning the docker-compose.yml. 
#The container will be named has project-name_service-name_container-number
#In this case postgis_postgis_1
#See it with:
#  sudo docker ps
#or, in case the container is stopped:
#   sudo docker ps -a 

#The network will be named as project-name_service-name
#In this case postgis_postgis
#See it with: 
#   sudo docker network ls

#To use the postgis service in other docker-compose network, you have to 
#declare it in the service, and declare it as external in the network list.

#Example
# services:
#   geoserver:
#     image: docker.osgeo.org/geoserver:2.24.2
#     restart: "no"
#     ports:
#       - 8083:8080
#     env_file:
#         - .env.dev
#     volumes:
#       - ./geoserver_data:/opt/geoserver_data/:Z
#       - ./additional_libs:/opt/additional_libs:Z # by mounting this we can install libs from host on startup
#     networks:
#       - postgis_postgis

# networks:
#    postgis_postgis:
#       driver: bridge
#       external: true

#How to access to the postgis service?. It depends form where you want to access.
#Docker network are internal, you must access, FROM OTHER DOCKER SERVICES:
#Access from other docker sercies:
# - Host: the name of the host of the service in the docker-compose.yml (postigs).
# - Port: the internal port (5432).

#Access from the host:
# - Host: the name of the host localhost, or domain name.
# - Port: the forwarded port (5440).

services:
  postgis:
    image: postgis/postgis:16-3.4
    restart: unless-stopped
    env_file:
      - .env
      - .env.prod
    ports:
      #VERY VERY IMPORTANT: if you forget 127.0.0.1, Docker
      #will introduce rules in iptables to open the exposed port
      #to the world --> DANGER. 
      - 127.0.0.1:${PRODUCTION_FORWARDED_PORT}:5432
    volumes: 
      - postgis-data-prod:/var/lib/postgresql/data
    healthcheck:
        test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
        interval: 10s
        timeout: 5s
        retries: 5
    networks:
      - postgis
volumes:
  postgis-data-prod:
    driver: local

networks:
   postgis:
      driver: bridge
